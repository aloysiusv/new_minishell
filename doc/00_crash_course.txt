# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    00_crash_course.txt                                :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: lrandria <lrandria@student.42.fr>          +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2022/06/17 18:35:19 by lrandria          #+#    #+#              #
#    Updated: 2022/06/25 10:28:08 by lrandria         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

STRUCTURE MINISHELL

I/ PARSING
    1 - Tokenize (with doubly-linked lists, after trimming front-end spaces):
        a. Identify chars / assign types and quotes
        b. Split by units (words, operators, in-quotes) /!\ KEEP SPACES /!\
        c. Re-assign types
    2 - Classify words
        a. files = after < or >; 
        b. limiter = after <<;
        b. commands = first word. Else, first word after pipes;
        c. built-ins = ft_strcmp(node->word, char *built-in);
    3 - Handle expansions if "$"
        a. if [echo $?]
            return (last command's exit status);
        b. else if [echo $USER] or [echo "$USER"]
            return (lrandria);
        c. else if [echo "$    USER"]
            return ($   USER);
        d. else if [echo '$USER']
            return ($USER); 
        e. else if [echo $ blabla]
            return ($ blabla);
        f. else if [echo $notfound]
            return (empty line);
        g. else if [echo $$] or [echo "$$"]
            return (pid of current process) /!\ Not explicitly demanded by subject


#include <stdio.h>
int main(int ac, char **av) {

    int x = 1;
    (void)ac;
    while (av[x]) {
        printf("-> %s\n", av[x]);
        x++;
    }
    return (0);
}

/*
->minishell ./a.out tutur"la"chaussure
-> [tuturlachaussure]
➜  minishell ./a.out tutur "la" chaussure
-> [tutur]
-> [la]
-> [chaussure]
➜  minishell ./a.out $USER               
-> [lrandria]
➜  minishell gcc -Wall -Wextra -Werror -fsanitize=address -g3 tutur_la_chaussure.c
➜  minishell ./a.out $USER'$USER'
-> lrandria$USER
➜  minishell ./a.out "$USER'$USER'"
-> lrandria'lrandria' 
*/

CODE CASCADE

Every main functions returns void and takes appropriate args.

MAIN (init_minishell)
||
V
getline_loop => split_cmdline => tokenise
                                    => do_expansions => get_t_cmd => exec

void    readline_loop();